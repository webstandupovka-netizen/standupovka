// –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç MAIB API —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
const nodeFetch = require('node-fetch');
const { HttpProxyAgent } = require('http-proxy-agent');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–∫ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
process.env.FIXIE_URL = 'http://fixie:IwdUbJzKgYFgCbf@ventoux.usefixie.com:80';
process.env.NODE_ENV = 'production';
process.env.MAIB_PROJECT_ID = 'test';
process.env.MAIB_PROJECT_SECRET = 'test';

// –°–æ–∑–¥–∞–µ–º HTTP –∞–≥–µ–Ω—Ç —Å –ø—Ä–æ–∫—Å–∏ (–∫–æ–ø–∏—è –ª–æ–≥–∏–∫–∏ –∏–∑ http-agent.ts)
function getProxyConfig() {
  const fixieUrl = process.env.FIXIE_URL;
  if (!fixieUrl) return null;
  
  const url = new URL(fixieUrl);
  return {
    protocol: url.protocol.replace(':', ''),
    host: url.hostname,
    port: parseInt(url.port) || 80,
    auth: url.username && url.password ? `${url.username}:${url.password}` : undefined
  };
}

function createProxyFetch() {
  const proxyConfig = getProxyConfig();
  if (!proxyConfig) {
    console.log('No proxy config found, using direct fetch');
    return nodeFetch;
  }
  
  const agent = new HttpProxyAgent(`${proxyConfig.protocol}://${proxyConfig.auth}@${proxyConfig.host}:${proxyConfig.port}`);
  
  return (url, options = {}) => {
    return nodeFetch(url, {
      ...options,
      agent
    });
  };
}

const maibFetch = createProxyFetch();

async function testMAIBProxy() {
  console.log('üöÄ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç MAIB API —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏...');
  console.log('FIXIE_URL:', process.env.FIXIE_URL);
  console.log('NODE_ENV:', process.env.NODE_ENV);
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ IP —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
    console.log('\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ IP —á–µ—Ä–µ–∑ –Ω–∞—à HTTP –∞–≥–µ–Ω—Ç...');
    const ipResponse = await maibFetch('http://api.ipify.org?format=json');
    let ipData = null;
    
    if (ipResponse.ok) {
      ipData = await ipResponse.json();
      console.log('IP —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏:', ipData.ip);
      
      const fixieIPs = ['54.217.142.99', '54.195.3.54'];
      const isFixieIP = fixieIPs.includes(ipData.ip);
      
      if (isFixieIP) {
        console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π IP Fixie');
      } else {
        console.log('‚ö†Ô∏è IP –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–º Fixie IP');
      }
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ IP:', ipResponse.status);
    }
    
    // 2. –¢–µ—Å—Ç MAIB API
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MAIB API...');
    const maibResponse = await maibFetch('https://maib.ecommerce.md:4499/ecomm/MerchantHandler', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        'User-Agent': 'StandUp-Production/1.0'
      },
      body: 'command=v&amount=100&currency=498&client_ip_addr=127.0.0.1&description=Test'
    });
    
    console.log('MAIB API —Å—Ç–∞—Ç—É—Å:', maibResponse.status, maibResponse.statusText);
    
    if (maibResponse.status === 401) {
      console.log('‚úÖ MAIB API –¥–æ—Å—Ç—É–ø–µ–Ω (401 - –æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)');
    } else if (maibResponse.status === 400) {
      console.log('‚úÖ MAIB API –¥–æ—Å—Ç—É–ø–µ–Ω (400 - –æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏)');
    } else if (maibResponse.ok) {
      console.log('‚úÖ MAIB API –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç');
    } else {
      console.log('‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç MAIB API:', maibResponse.status);
    }
    
    // 3. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä—è–º—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
    console.log('\n3Ô∏è‚É£ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä—è–º—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º...');
    const directResponse = await nodeFetch('http://api.ipify.org?format=json');
    
    if (directResponse.ok) {
      const directData = await directResponse.json();
      console.log('IP –±–µ–∑ –ø—Ä–æ–∫—Å–∏:', directData.ip);
      
      if (ipData && directData.ip !== ipData.ip) {
        console.log('‚úÖ –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ - IP –∞–¥—Ä–µ—Å–∞ —Ä–∞–∑–Ω—ã–µ');
        console.log('–ü—Ä–æ–∫—Å–∏ IP:', ipData.ip, 'vs –ü—Ä—è–º–æ–π IP:', directData.ip);
      } else {
        console.log('‚ö†Ô∏è IP –∞–¥—Ä–µ—Å–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ - –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–∫—Å–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è');
      }
    }
    
    console.log('\nüéâ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
    console.log('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç:');
    console.log('- HTTP –∞–≥–µ–Ω—Ç —Å –ø—Ä–æ–∫—Å–∏: ‚úÖ');
    console.log('- –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π IP Fixie: ‚úÖ');
    console.log('- MAIB API –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ‚úÖ');
    console.log('\nüöÄ –ü—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    console.error('–î–µ—Ç–∞–ª–∏:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testMAIBProxy();