// –¢–µ—Å—Ç –ø—Ä–æ–∫—Å–∏ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º–µ
const nodeFetch = require('node-fetch');
const { HttpsProxyAgent } = require('https-proxy-agent');
const { HttpProxyAgent } = require('http-proxy-agent');

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∫–∞–∫ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
process.env.FIXIE_URL = 'http://fixie:IwdUbJzKgYFgCbf@ventoux.usefixie.com:80';
process.env.NODE_ENV = 'production';

// –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ config.ts
const getProxyConfig = () => {
  const fixieUrl = process.env.FIXIE_URL;
  const isProduction = process.env.NODE_ENV === 'production';
  
  return {
    url: fixieUrl,
    enabled: isProduction && !!fixieUrl
  };
};

// –°–∏–º—É–ª–∏—Ä—É–µ–º createProxyFetch –∏–∑ http-agent.ts (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
const createProxyFetch = (proxyConfig) => {
  const shouldUseProxy = proxyConfig?.enabled && proxyConfig?.url;
  
  if (!shouldUseProxy) {
    console.log('üîÑ –ü—Ä–æ–∫—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π fetch');
    return nodeFetch;
  }
  
  console.log('üîÑ –ü—Ä–æ–∫—Å–∏ –≤–∫–ª—é—á–µ–Ω:', proxyConfig.url);
  
  // –î–ª—è Node.js –æ–∫—Ä—É–∂–µ–Ω–∏—è (—Å–µ—Ä–≤–µ—Ä–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞)
  if (typeof window === 'undefined') {
    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–≥–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ URL –ø—Ä–æ–∫—Å–∏
      const proxyUrl = new URL(proxyConfig.url);
      const agent = proxyUrl.protocol === 'https:' 
        ? new HttpsProxyAgent(proxyConfig.url)
        : new HttpProxyAgent(proxyConfig.url);
      
      return async (url, init = {}) => {
        const options = {
          ...init,
          agent: agent
        };
        
        return nodeFetch(url, options);
      };
    } catch (error) {
      console.warn('Proxy agents not available, falling back to node-fetch');
      return nodeFetch;
    }
  }
  
  return nodeFetch;
};

async function testProductionProxy() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º–µ...');
  console.log('FIXIE_URL:', process.env.FIXIE_URL);
  console.log('NODE_ENV:', process.env.NODE_ENV);
  
  const proxyConfig = getProxyConfig();
  console.log('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏:', proxyConfig);
  
  const proxyFetch = createProxyFetch(proxyConfig);
  
  let ipData = null;
  
  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ IP —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
    console.log('\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ IP —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏...');
    
    console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ –∫ ipify.org...');
    const ipResponse = await proxyFetch('http://api.ipify.org?format=json', {
      headers: {
        'User-Agent': 'StandUp-Production-Test/1.0'
      }
    });
    
    console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', ipResponse.status);
    if (ipResponse.ok) {
      ipData = await ipResponse.json();
      console.log('IP —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏:', ipData.ip);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ IP Fixie
      const fixieIPs = ['54.217.142.99', '54.195.3.54'];
      const isFixieIP = fixieIPs.includes(ipData.ip);
      
      if (isFixieIP) {
        console.log('üéâ –û—Ç–ª–∏—á–Ω–æ! –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π IP Fixie');
      } else {
        console.log('‚ö†Ô∏è IP –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–º IP Fixie');
        console.log('–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
        console.log('- Fixie –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥—Ä—É–≥–∏–µ IP –∞–¥—Ä–µ—Å–∞');
        console.log('- –ü—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        console.log('- –°–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
      }
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ IP:', ipResponse.status);
      const errorText = await ipResponse.text();
      console.log('–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:', errorText);
    }
    
    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MAIB API
    console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MAIB API...');
    
    const maibResponse = await proxyFetch('https://api.maibmerchants.md/v1/generate-token', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'StandUp-Production-Test/1.0'
      },
      body: JSON.stringify({
        projectId: 'test-project',
        projectSecret: 'test-secret'
      })
    });
    
    console.log('MAIB API —Å—Ç–∞—Ç—É—Å:', maibResponse.status, maibResponse.statusText);
    
    if (maibResponse.status === 401 || maibResponse.status === 400) {
      console.log('‚úÖ MAIB API –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ (–æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–∂–∏–¥–∞–µ–º–∞)');
    } else if (maibResponse.status === 200) {
      console.log('‚úÖ MAIB API —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏');
    } else {
      console.log('‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç MAIB API:', maibResponse.status);
    }
    
    // –¢–µ—Å—Ç 3: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä—è–º—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
    console.log('\n3Ô∏è‚É£ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä—è–º—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º...');
    
    const directResponse = await nodeFetch('http://api.ipify.org?format=json', {
      headers: {
        'User-Agent': 'StandUp-Direct-Test/1.0'
      }
    });
    
    if (directResponse.ok) {
      const directData = await directResponse.json();
      console.log('IP –±–µ–∑ –ø—Ä–æ–∫—Å–∏:', directData.ip);
      
      if (ipData && directData.ip !== ipData.ip) {
        console.log('‚úÖ –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç - IP –∞–¥—Ä–µ—Å–∞ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è');
        console.log('–ü—Ä–æ–∫—Å–∏ IP:', ipData.ip, 'vs –ü—Ä—è–º–æ–π IP:', directData.ip);
      } else {
        console.log('‚ö†Ô∏è IP –∞–¥—Ä–µ—Å–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ - –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–∫—Å–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è');
      }
    }
    
    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
     console.log('\nüìã –†–µ–∑—é–º–µ:');
     console.log('- –ü—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω:', proxyConfig.enabled ? '‚úÖ' : '‚ùå');
     console.log('- MAIB API –¥–æ—Å—Ç—É–ø–µ–Ω:', maibResponse.ok || [400, 401].includes(maibResponse.status) ? '‚úÖ' : '‚ùå');
     
     const fixieIPs = ['54.217.142.99', '54.195.3.54'];
     const hasFixieIP = ipData && fixieIPs.includes(ipData.ip);
     console.log('- –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π IP:', hasFixieIP ? '‚úÖ' : '‚ö†Ô∏è');
     
     if (ipData) {
       console.log('\nüîç –î–µ—Ç–∞–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:');
       console.log('- –¢–µ–∫—É—â–∏–π IP:', ipData.ip);
       console.log('- –û–∂–∏–¥–∞–µ–º—ã–µ IP Fixie:', fixieIPs.join(', '));
       
       if (!hasFixieIP) {
         console.log('\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: IP –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º IP Fixie');
         console.log('–≠—Ç–æ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å:');
         console.log('1. Fixie –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥—Ä—É–≥–∏–µ IP –∞–¥—Ä–µ—Å–∞ (–Ω–æ—Ä–º–∞–ª—å–Ω–æ)');
         console.log('2. –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ —á–µ—Ä–µ–∑ –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–µ—Ä');
         console.log('3. –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Fixie –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
       }
     }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    console.error('–î–µ—Ç–∞–ª–∏:', error.code || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testProductionProxy();