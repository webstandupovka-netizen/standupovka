// –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Fixie
const { HttpsProxyAgent } = require('https-proxy-agent');
const http = require('http');
const https = require('https');

const FIXIE_URL = 'http://fixie:IwdUbJzKgYFgCbf@ventoux.usefixie.com:80';

async function testDifferentMethods() {
  console.log('üîç –û—Ç–ª–∞–¥–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Fixie...');
  console.log('Proxy URL:', FIXIE_URL);
  
  // –ú–µ—Ç–æ–¥ 1: HttpsProxyAgent —Å fetch (–∫–∞–∫ –≤ –Ω–∞—à–µ–º –∫–æ–¥–µ)
  console.log('\n1Ô∏è‚É£ –¢–µ—Å—Ç HttpsProxyAgent —Å fetch...');
  try {
    const agent = new HttpsProxyAgent(FIXIE_URL);
    
    const response = await fetch('https://httpbin.org/ip', {
      agent: agent,
      headers: {
        'User-Agent': 'Node-Fetch-Test/1.0'
      }
    });
    
    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ HttpsProxyAgent + fetch:', data.origin);
    } else {
      console.log('‚ùå HttpsProxyAgent + fetch failed:', response.status);
    }
  } catch (error) {
    console.log('‚ùå HttpsProxyAgent + fetch error:', error.message);
  }
  
  // –ú–µ—Ç–æ–¥ 2: HttpsProxyAgent —Å https –º–æ–¥—É–ª–µ–º
  console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç HttpsProxyAgent —Å https –º–æ–¥—É–ª–µ–º...');
  try {
    const agent = new HttpsProxyAgent(FIXIE_URL);
    
    const options = {
      hostname: 'httpbin.org',
      port: 443,
      path: '/ip',
      method: 'GET',
      agent: agent,
      headers: {
        'User-Agent': 'Node-HTTPS-Test/1.0'
      }
    };
    
    const response = await new Promise((resolve, reject) => {
      const req = https.request(options, (res) => {
        let data = '';
        res.on('data', (chunk) => data += chunk);
        res.on('end', () => {
          try {
            resolve(JSON.parse(data));
          } catch (e) {
            reject(e);
          }
        });
      });
      
      req.on('error', reject);
      req.end();
    });
    
    console.log('‚úÖ HttpsProxyAgent + https:', response.origin);
  } catch (error) {
    console.log('‚ùå HttpsProxyAgent + https error:', error.message);
  }
  
  // –ú–µ—Ç–æ–¥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç –±–µ–∑ –ø—Ä–æ–∫—Å–∏...');
  try {
    const response = await fetch('https://httpbin.org/ip', {
      headers: {
        'User-Agent': 'Direct-Test/1.0'
      }
    });
    
    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:', data.origin);
    }
  } catch (error) {
    console.log('‚ùå –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ error:', error.message);
  }
  
  // –ú–µ—Ç–æ–¥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏
  console.log('\n4Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏...');
  try {
    const agent = new HttpsProxyAgent(FIXIE_URL);
    console.log('Agent —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    console.log('Agent options:', {
      protocol: agent.protocol,
      host: agent.proxy?.host,
      port: agent.proxy?.port,
      auth: agent.proxy?.auth ? '[–°–ö–†–´–¢–û]' : '–Ω–µ—Ç'
    });
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞:', error.message);
  }
  
  console.log('\nüéâ –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testDifferentMethods().catch(console.error);