require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function testCastrConnection() {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Castr...');
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
    console.log('\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã stream_settings:');
    const { data: streamData, error: streamError } = await supabase
      .from('stream_settings')
      .select('*')
      .limit(1);
    
    if (streamError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ:', streamError);
      return;
    }
    
    if (streamData && streamData[0]) {
      const columns = Object.keys(streamData[0]);
      const castrColumns = columns.filter(col => col.startsWith('castr_'));
      
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—è Castr:', castrColumns);
      console.log('‚úÖ –í—Å–µ–≥–æ –ø–æ–ª–µ–π Castr:', castrColumns.length);
      
      if (castrColumns.length === 5) {
        console.log('‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è Castr –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç!');
      } else {
        console.log('‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–æ–ª–µ–π Castr');
      }
    }
    
    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö Castr
    console.log('\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö Castr:');
    const testData = {
      castr_stream_id: 'test-stream-id',
      castr_embed_url: 'https://fr.castr.io/static/test-stream-id',
      castr_rtmp_url: 'rtmp://fr.castr.io/static',
      castr_stream_key: 'test-stream-key',
      castr_playback_url: 'https://fr.castr.io/static/test-stream-id.m3u8'
    };
    
    const { data: updateData, error: updateError } = await supabase
      .from('stream_settings')
      .update(testData)
      .eq('id', '550e8400-e29b-41d4-a716-446655440000')
      .select();
    
    if (updateError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', updateError);
    } else {
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ Castr —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
      console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è:', Object.keys(testData));
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Castr:');
    const { data: readData, error: readError } = await supabase
      .from('stream_settings')
      .select('castr_stream_id, castr_embed_url, castr_rtmp_url, castr_stream_key, castr_playback_url')
      .eq('id', '550e8400-e29b-41d4-a716-446655440000')
      .single();
    
    if (readError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', readError);
    } else {
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ Castr —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã:');
      console.log(JSON.stringify(readData, null, 2));
    }
    
    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º API —ç–Ω–¥–ø–æ–∏–Ω—Ç
    console.log('\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞:');
    try {
      const response = await fetch('http://localhost:3000/api/stream/550e8400-e29b-41d4-a716-446655440000');
      if (response.ok) {
        const apiData = await response.json();
        const hasCastrFields = Object.keys(apiData).some(key => key.startsWith('castr_'));
        
        if (hasCastrFields) {
          console.log('‚úÖ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—è Castr');
          console.log('‚úÖ Castr –ø–æ–ª—è –≤ API:', Object.keys(apiData).filter(key => key.startsWith('castr_')));
        } else {
          console.log('‚ùå API –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—è Castr');
        }
      } else {
        console.log('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω)');
      }
    } catch (apiError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API:', apiError.message);
    }
    
    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

testCastrConnection();