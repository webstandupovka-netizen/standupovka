const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('Missing Supabase environment variables');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function testCastrStream() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Castr —Å—Ç—Ä–∏–º–∞...');
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∏–º–∞
    const { data: stream, error } = await supabase
      .from('stream_settings')
      .select('*')
      .eq('is_active', true)
      .single();
    
    if (error) {
      throw error;
    }
    
    console.log('\nüì∫ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∏–º–µ:');
    console.log('   ID:', stream.id);
    console.log('   –ù–∞–∑–≤–∞–Ω–∏–µ:', stream.title);
    console.log('   –°—Ç–∞—Ç—É—Å:', stream.is_live ? 'üî¥ –í —ç—Ñ–∏—Ä–µ' : '‚ö´ –ù–µ –≤ —ç—Ñ–∏—Ä–µ');
    console.log('   –ê–∫—Ç–∏–≤–µ–Ω:', stream.is_active ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç');
    
    console.log('\nüé• –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Castr:');
    console.log('   Stream ID:', stream.castr_stream_id || '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    console.log('   RTMP URL:', stream.castr_rtmp_url || '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    console.log('   Stream Key:', stream.castr_stream_key ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    console.log('   Playback URL:', stream.castr_playback_url || '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    console.log('   Embed URL:', stream.castr_embed_url || '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–ª–µ–µ—Ä–∞
    console.log('\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–ª–µ–µ—Ä–∞...');
    if (stream.castr_playback_url) {
      try {
        const response = await fetch(stream.castr_playback_url, { method: 'HEAD' });
        console.log('   –°—Ç–∞—Ç—É—Å –ø–ª–µ–µ—Ä–∞:', response.status === 200 ? '‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' : `‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω (${response.status})`);
      } catch (fetchError) {
        console.log('   –°—Ç–∞—Ç—É—Å –ø–ª–µ–µ—Ä–∞: ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
      }
    } else {
      console.log('   –°—Ç–∞—Ç—É—Å –ø–ª–µ–µ—Ä–∞: ‚ùå URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ—Ç—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫:');
    const requiredFields = [
      { field: 'castr_stream_id', name: 'Stream ID' },
      { field: 'castr_rtmp_url', name: 'RTMP URL' },
      { field: 'castr_stream_key', name: 'Stream Key' },
      { field: 'castr_playback_url', name: 'Playback URL' },
      { field: 'castr_embed_url', name: 'Embed URL' }
    ];
    
    let allFieldsSet = true;
    requiredFields.forEach(({ field, name }) => {
      const isSet = stream[field] && stream[field].trim() !== '';
      console.log(`   ${name}: ${isSet ? '‚úÖ' : '‚ùå'}`);
      if (!isSet) allFieldsSet = false;
    });
    
    console.log('\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç:');
    if (allFieldsSet) {
      console.log('   ‚úÖ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Castr –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!');
      console.log('   üöÄ –°—Ç—Ä–∏–º –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
      
      console.log('\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞:');
      console.log('   1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ RTMP URL:', stream.castr_rtmp_url);
      console.log('   2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Stream Key:', stream.castr_stream_key);
      console.log('   3. –ü–ª–µ–µ—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É:', stream.castr_playback_url);
    } else {
      console.log('   ‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
      console.log('   üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥–º–∏–Ω—Å–∫—É—é –ø–∞–Ω–µ–ª—å');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç—Ä–∏–º–∞:', error.message);
    process.exit(1);
  }
}

testCastrStream();