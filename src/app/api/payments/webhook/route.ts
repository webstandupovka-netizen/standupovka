import { NextRequest, NextResponse } from 'next/server'
import { MAIBPaymentService } from '@/lib/payments/maib'
import { supabaseServer } from '@/lib/database/client'
import { emailService } from '@/lib/email/service'

export async function POST(request: NextRequest) {
  try {
    console.log('=== MAIB Webhook received ===');
    console.log('Headers:', Object.fromEntries(request.headers.entries()));
    
    const body = await request.text()
    console.log('Body:', body);
    
    const signature = request.headers.get('x-maib-signature')
    console.log('Signature:', signature);

    if (!signature) {
      console.log('‚ùå Missing signature');
      return NextResponse.json({ error: 'Missing signature' }, { status: 400 })
    }

    const maibService = new MAIBPaymentService()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å webhook
    const isValid = maibService.validateWebhookSignature(body, signature)
    console.log('Signature valid:', isValid);
    
    if (!isValid) {
      console.log('‚ùå Invalid signature');
      return NextResponse.json({ error: 'Invalid signature' }, { status: 401 })
    }

    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ webhook
    const webhookData = JSON.parse(body)
    console.log('Webhook data:', JSON.stringify(webhookData, null, 2));
    
    const paymentDetails = maibService.processWebhook(webhookData)
    console.log('Processed payment details:', JSON.stringify(paymentDetails, null, 2));

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log(`Updating payment with orderId: ${paymentDetails.orderId} to status: ${paymentDetails.status}`);
    
    const { data: updatedPayment, error: updateError } = await supabaseServer
      .from('payments')
      .update({
        status: paymentDetails.status,
        maib_transaction_id: paymentDetails.payId,
        updated_at: new Date().toISOString(),
        metadata: {
          ...paymentDetails.metadata,
          webhook_received_at: new Date().toISOString(),
          rrn: paymentDetails.rrn,
          approval_code: paymentDetails.approvalCode
        }
      })
      .eq('maib_order_id', paymentDetails.orderId)
      .select()
      .single()

    if (updateError) {
      console.error('‚ùå Failed to update payment:', updateError)
      return NextResponse.json({ error: 'Failed to update payment' }, { status: 500 })
    }
    
    console.log('‚úÖ Payment updated successfully:', updatedPayment);

    // –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (paymentDetails.status === 'completed') {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        const { data: payment } = await supabaseServer
          .from('payments')
          .select(`
            *,
            user_profiles!inner(full_name, email)
          `)
          .eq('maib_order_id', paymentDetails.orderId)
          .single()

        if (payment && payment.user_profiles.email) {
          const userFirstname = payment.user_profiles.full_name?.split(' ')[0] || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
          console.log(`üìß Sending payment success email to: ${payment.user_profiles.email}`);
          
          await emailService.sendPaymentSuccessEmail({
            userEmail: payment.user_profiles.email,
            userFirstname,
            streamTitle: payment.metadata?.stream_title || '–°—Ç–µ–Ω–¥–∞–ø –í–µ—á–µ—Ä',
            streamDate: '21 —Å–µ–Ω—Ç—è–±—Ä—è 2025',
            streamTime: '20:00',
            amount: payment.amount,
            currency: payment.currency,
            userId: payment.user_id
          })
          
          console.log(`‚úÖ Payment completed and email sent for order: ${paymentDetails.orderId}`)
        }
      } catch (emailError) {
        console.error('‚ùå Failed to send payment success email:', emailError)
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É webhook –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ email
      }
    }

    console.log('‚úÖ Webhook processed successfully');
    return NextResponse.json({ success: true })

  } catch (error) {
    console.error('‚ùå Webhook processing error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}