const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('Missing Supabase environment variables');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function fixCastrPlaybackUrl() {
  try {
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Castr Playback URL...');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const { data: stream, error: fetchError } = await supabase
      .from('stream_settings')
      .select('*')
      .eq('is_active', true)
      .single();
    
    if (fetchError) {
      throw fetchError;
    }
    
    console.log('üì∫ –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:');
    console.log('   Stream ID:', stream.castr_stream_id);
    console.log('   Embed URL:', stream.castr_embed_url);
    console.log('   Playback URL (—Å—Ç–∞—Ä—ã–π):', stream.castr_playback_url);
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π HLS URL
    const hlsUrl = `https://fr.castr.io/${stream.castr_stream_id}.m3u8`;
    console.log('   Playback URL (–Ω–æ–≤—ã–π):', hlsUrl);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º playback URL
    const { data, error } = await supabase
      .from('stream_settings')
      .update({
        castr_playback_url: hlsUrl,
        updated_at: new Date().toISOString()
      })
      .eq('id', stream.id)
      .select();
    
    if (error) {
      throw error;
    }
    
    console.log('\n‚úÖ Playback URL —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
    console.log('   –ù–æ–≤—ã–π HLS URL:', data[0].castr_playback_url);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å HLS –ø–æ—Ç–æ–∫–∞
    console.log('\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ HLS –ø–æ—Ç–æ–∫–∞...');
    try {
      const response = await fetch(hlsUrl, { method: 'HEAD' });
      console.log('   –°—Ç–∞—Ç—É—Å HLS:', response.status === 200 ? '‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' : `‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω (${response.status})`);
    } catch (fetchError) {
      console.log('   –°—Ç–∞—Ç—É—Å HLS: ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–≤–æ–∑–º–æ–∂–Ω–æ, —Å—Ç—Ä–∏–º –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω)');
    }
    
    console.log('\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç:');
    console.log('   ‚úÖ VideoPlayer —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π HLS URL');
    console.log('   üì± –°—Ç—Ä–∞–Ω–∏—Ü–∞ /stream –¥–æ–ª–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤–∏–¥–µ–æ');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ Playback URL:', error.message);
    process.exit(1);
  }
}

fixCastrPlaybackUrl();