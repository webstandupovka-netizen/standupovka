const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('Missing Supabase environment variables');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function saveCastrSettings() {
  try {
    console.log('üîÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Castr...');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç—Ä–∏–º
    const { data: streams, error: fetchError } = await supabase
      .from('stream_settings')
      .select('*')
      .eq('is_active', true)
      .limit(1);
    
    if (fetchError) {
      throw fetchError;
    }
    
    if (!streams || streams.length === 0) {
      console.log('‚ùå –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∏–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }
    
    const streamId = streams[0].id;
    console.log(`üì∫ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∏–º–∞: ${streamId}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Castr
    const { data, error } = await supabase
      .from('stream_settings')
      .update({
        castr_stream_id: 'live_691333907e6811f09d8453d91b8ad2ad',
        castr_embed_url: 'https://player.castr.com/live_691333907e6811f09d8453d91b8ad2ad',
        castr_rtmp_url: 'rtmp://fr.castr.io/static',
        castr_stream_key: 'live_691333907e6811f09d8453d91b8ad2ad?password=82943a02',
        castr_playback_url: 'https://player.castr.com/live_691333907e6811f09d8453d91b8ad2ad',
        updated_at: new Date().toISOString()
      })
      .eq('id', streamId)
      .select();
    
    if (error) {
      throw error;
    }
    
    console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Castr —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:');
    console.log('   Stream ID:', data[0].castr_stream_id);
    console.log('   RTMP URL:', data[0].castr_rtmp_url);
    console.log('   Stream Key:', data[0].castr_stream_key);
    console.log('   Playback URL:', data[0].castr_playback_url);
    console.log('   Embed URL:', data[0].castr_embed_url);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
    const { data: verification, error: verifyError } = await supabase
      .from('stream_settings')
      .select('castr_stream_id, castr_rtmp_url, castr_stream_key, castr_playback_url, castr_embed_url')
      .eq('id', streamId)
      .single();
    
    if (verifyError) {
      throw verifyError;
    }
    
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:');
    console.log('   ‚úì Stream ID —Å–æ—Ö—Ä–∞–Ω—ë–Ω:', verification.castr_stream_id ? '–î–∞' : '–ù–µ—Ç');
    console.log('   ‚úì RTMP URL —Å–æ—Ö—Ä–∞–Ω—ë–Ω:', verification.castr_rtmp_url ? '–î–∞' : '–ù–µ—Ç');
    console.log('   ‚úì Stream Key —Å–æ—Ö—Ä–∞–Ω—ë–Ω:', verification.castr_stream_key ? '–î–∞' : '–ù–µ—Ç');
    console.log('   ‚úì Playback URL —Å–æ—Ö—Ä–∞–Ω—ë–Ω:', verification.castr_playback_url ? '–î–∞' : '–ù–µ—Ç');
    console.log('   ‚úì Embed URL —Å–æ—Ö—Ä–∞–Ω—ë–Ω:', verification.castr_embed_url ? '–î–∞' : '–ù–µ—Ç');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Castr:', error.message);
    process.exit(1);
  }
}

saveCastrSettings();